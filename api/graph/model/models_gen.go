// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/looped-dev/cms/api/models"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

type FacebookCard struct {
	Type        *string `json:"type" bson:"type,omitempty"`
	Title       *string `json:"title" bson:"title,omitempty"`
	Description *string `json:"description" bson:"description,omitempty"`
	Image       *string `json:"image" bson:"image,omitempty"`
	URL         *string `json:"url" bson:"url,omitempty"`
}

type Image struct {
	ID          string  `json:"id" bson:"_id,omitempty"`
	Slug        string  `json:"slug" bson:"slug,omitempty"`
	URL         string  `json:"url" bson:"url,omitempty"`
	Alt         *string `json:"alt" bson:"alt,omitempty"`
	Caption     *string `json:"caption" bson:"caption,omitempty"`
	Description *string `json:"description" bson:"description,omitempty"`
	Sizes       *Sizes  `json:"sizes" bson:"sizes,omitempty"`
}

type InitialSetupInput struct {
	SiteName string `json:"siteName" bson:"siteName,omitempty"`
	Name     string `json:"name" bson:"name,omitempty"`
	Email    string `json:"email" bson:"email,omitempty"`
	Password string `json:"password" bson:"password,omitempty"`
}

type InitialSetupResponse struct {
	Staff        *models.StaffMember `json:"staff" bson:"staff,omitempty"`
	AccessToken  string              `json:"accessToken" bson:"accessToken,omitempty"`
	RefreshToken string              `json:"refreshToken" bson:"refreshToken,omitempty"`
}

type Member struct {
	ID    string `json:"id" bson:"_id,omitempty"`
	Name  string `json:"name" bson:"name,omitempty"`
	Email string `json:"email" bson:"email,omitempty"`
	// Email address verification is vital for sending subscription
	IsEmailVerified bool `json:"isEmailVerified" bson:"isEmailVerified,omitempty"`
	// Password is optional as members might not need to login
	Password     *string               `json:"password" bson:"password,omitempty"`
	Subscription []*MemberSubscription `json:"subscription" bson:"subscription,omitempty"`
	CreatedAt    time.Time             `json:"createdAt" bson:"createdAt,omitempty"`
	UpdatedAt    time.Time             `json:"updatedAt" bson:"updatedAt,omitempty"`
}

type MemberSubscription struct {
	ID          string `json:"id" bson:"_id,omitempty"`
	Title       string `json:"title" bson:"title,omitempty"`
	Description string `json:"description" bson:"description,omitempty"`
	// For free subscriptions, this is set to 0
	Price     *string   `json:"price" bson:"price,omitempty"`
	CreatedAt time.Time `json:"createdAt" bson:"createdAt,omitempty"`
	UpdatedAt time.Time `json:"updatedAt" bson:"updatedAt,omitempty"`
}

type Page struct {
	ID            string  `json:"id" bson:"_id,omitempty"`
	Title         string  `json:"title" bson:"title,omitempty"`
	Slug          string  `json:"slug" bson:"slug,omitempty"`
	Excerpt       *string `json:"excerpt" bson:"excerpt,omitempty"`
	Content       string  `json:"content" bson:"content,omitempty"`
	FeaturedImage *Image  `json:"featuredImage" bson:"featuredImage,omitempty"`
	// SEO metadata details for the page
	Seo         *Seo      `json:"seo" bson:"seo,omitempty"`
	PublishedAt time.Time `json:"publishedAt" bson:"publishedAt,omitempty"`
	CreatedAt   time.Time `json:"createdAt" bson:"createdAt,omitempty"`
	UpdatedAt   time.Time `json:"updatedAt" bson:"updatedAt,omitempty"`
}

type Post struct {
	ID            string  `json:"id" bson:"_id,omitempty"`
	Title         string  `json:"title" bson:"title,omitempty"`
	Slug          string  `json:"slug" bson:"slug,omitempty"`
	IsFeatured    bool    `json:"isFeatured" bson:"isFeatured,omitempty"`
	Excerpt       *string `json:"excerpt" bson:"excerpt,omitempty"`
	Content       string  `json:"content" bson:"content,omitempty"`
	FeaturedImage *Image  `json:"featuredImage" bson:"featuredImage,omitempty"`
	// SEO metadata details for the post or page
	Seo *Seo `json:"seo" bson:"seo,omitempty"`
	// Members who have access to this post - this is determined by subscription groups
	// they are part of.
	PostAccess  []*MemberSubscription `json:"postAccess" bson:"postAccess,omitempty"`
	PublishedAt time.Time             `json:"publishedAt" bson:"publishedAt,omitempty"`
	CreatedAt   time.Time             `json:"createdAt" bson:"createdAt,omitempty"`
	UpdatedAt   time.Time             `json:"updatedAt" bson:"updatedAt,omitempty"`
}

type Seo struct {
	Title       *string `json:"title" bson:"title,omitempty"`
	Description *string `json:"description" bson:"description,omitempty"`
	Image       *string `json:"image" bson:"image,omitempty"`
}

type SEOInput struct {
	Title       *string `json:"title" bson:"title,omitempty"`
	Description *string `json:"description" bson:"description,omitempty"`
	Image       *string `json:"image" bson:"image,omitempty"`
}

type SiteSettings struct {
	ID primitive.ObjectID `json:"id" bson:"_id,omitempty"`
	// The name of the site.
	SiteName string `json:"siteName" bson:"siteName,omitempty"`
	// The description of the site. Can be used for meta description.
	SiteDescription *string `json:"siteDescription" bson:"siteDescription,omitempty"`
	// The time zone the the site is in. This is for content times of publication
	// i.e. published at, updated at etc.
	Timezone string `json:"timezone" bson:"timezone,omitempty"`
	// The base url of the frontend application that will serve the site, this will
	// allow for the base URL to be appended to URLs generated by the backend.
	BaseURL string `json:"baseURL" bson:"baseURL,omitempty"`
	// Links to social media sites i.e. Twitter, Facebook, etc.
	SocialProfiles *SocialProfiles `json:"socialProfiles" bson:"socialProfiles,omitempty"`
	// Search Engine Optimization (SEO) settings for the entire site
	Seo *Seo `json:"seo" bson:"seo,omitempty"`
	// Twitter card settings for the entire site
	TwitterCard *TwitterCard `json:"twitterCard" bson:"twitterCard,omitempty"`
	// Facebook card settings for the entire site
	FacebookCard *FacebookCard       `json:"facebookCard" bson:"facebookCard,omitempty"`
	CreatedAt    primitive.Timestamp `json:"createdAt" bson:"createdAt,omitempty"`
	UpdatedAt    primitive.Timestamp `json:"updatedAt" bson:"updatedAt,omitempty"`
}

type Size struct {
	Width  int    `json:"width" bson:"width,omitempty"`
	Height int    `json:"height" bson:"height,omitempty"`
	URL    string `json:"url" bson:"url,omitempty"`
}

type Sizes struct {
	Thumbnail   *Size `json:"thumbnail" bson:"thumbnail,omitempty"`
	Medium      *Size `json:"medium" bson:"medium,omitempty"`
	MediumLarge *Size `json:"medium_large" bson:"medium_large,omitempty"`
	Large       *Size `json:"large" bson:"large,omitempty"`
	Full        *Size `json:"full" bson:"full,omitempty"`
}

// Links to social media sites i.e. Twitter, Facebook, etc.
type SocialProfiles struct {
	Facebook *string `json:"facebook" bson:"facebook,omitempty"`
	Twitter  *string `json:"twitter" bson:"twitter,omitempty"`
}

type SocialProfilesInput struct {
	Facebook *string `json:"facebook" bson:"facebook,omitempty"`
	Twitter  *string `json:"twitter" bson:"twitter,omitempty"`
}

type StaffAcceptInviteInput struct {
	Email           string `json:"email" bson:"email,omitempty"`
	Name            string `json:"name" bson:"name,omitempty"`
	Password        string `json:"password" bson:"password,omitempty"`
	ConfirmPassword string `json:"confirmPassword" bson:"confirmPassword,omitempty"`
	Code            string `json:"code" bson:"code,omitempty"`
}

type StaffChangePasswordInput struct {
	ID              string `json:"id" bson:"_id,omitempty"`
	Password        string `json:"password" bson:"password,omitempty"`
	ConfirmPassword string `json:"confirmPassword" bson:"confirmPassword,omitempty"`
}

type StaffDeleteInput struct {
	ID string `json:"id" bson:"_id,omitempty"`
}

type StaffForgotPasswordInput struct {
	Email string `json:"email" bson:"email,omitempty"`
}

type StaffInviteInput struct {
	Email string           `json:"email" bson:"email,omitempty"`
	Role  models.StaffRole `json:"role" bson:"role,omitempty"`
}

type StaffLoginInput struct {
	Email    string `json:"email" bson:"email,omitempty"`
	Password string `json:"password" bson:"password,omitempty"`
}

type StaffLoginResponse struct {
	Staff        *models.StaffMember `json:"staff" bson:"staff,omitempty"`
	AccessToken  string              `json:"accessToken" bson:"accessToken,omitempty"`
	RefreshToken string              `json:"refreshToken" bson:"refreshToken,omitempty"`
}

type StaffRefreshTokenInput struct {
	AccessToken  string `json:"accessToken" bson:"accessToken,omitempty"`
	RefreshToken string `json:"refreshToken" bson:"refreshToken,omitempty"`
}

type StaffRefreshTokenResponse struct {
	AccessToken  string `json:"accessToken" bson:"accessToken,omitempty"`
	RefreshToken string `json:"refreshToken" bson:"refreshToken,omitempty"`
}

type StaffRegisterInput struct {
	Name     string           `json:"name" bson:"name,omitempty"`
	Email    string           `json:"email" bson:"email,omitempty"`
	Password string           `json:"password" bson:"password,omitempty"`
	Role     models.StaffRole `json:"role" bson:"role,omitempty"`
}

type StaffResetPasswordInput struct {
	Email           string `json:"email" bson:"email,omitempty"`
	Code            string `json:"code" bson:"code,omitempty"`
	Password        string `json:"password" bson:"password,omitempty"`
	ConfirmPassword string `json:"confirmPassword" bson:"confirmPassword,omitempty"`
}

type StaffUpdateInput struct {
	Name  string `json:"name" bson:"name,omitempty"`
	Email string `json:"email" bson:"email,omitempty"`
}

type Tag struct {
	ID          string    `json:"id" bson:"_id,omitempty"`
	Title       string    `json:"title" bson:"title,omitempty"`
	Slug        string    `json:"slug" bson:"slug,omitempty"`
	Image       *Image    `json:"image" bson:"image,omitempty"`
	Description *string   `json:"description" bson:"description,omitempty"`
	CreatedAt   time.Time `json:"createdAt" bson:"createdAt,omitempty"`
	UpdatedAt   time.Time `json:"updatedAt" bson:"updatedAt,omitempty"`
}

type TwitterCard struct {
	Card        *string `json:"card" bson:"card,omitempty"`
	Site        *string `json:"site" bson:"site,omitempty"`
	Title       *string `json:"title" bson:"title,omitempty"`
	Description *string `json:"description" bson:"description,omitempty"`
	Image       *string `json:"image" bson:"image,omitempty"`
	Creator     *string `json:"creator" bson:"creator,omitempty"`
}

type UpdatePageInput struct {
	Title         *string `json:"title" bson:"title,omitempty"`
	Content       *string `json:"content" bson:"content,omitempty"`
	Excerpt       *string `json:"excerpt" bson:"excerpt,omitempty"`
	FeaturedImage *string `json:"featuredImage" bson:"featuredImage,omitempty"`
	// If a post is featured, default to false.
	IsFeatured *bool `json:"isFeatured" bson:"isFeatured,omitempty"`
	// List of subscription groups with access to the the post
	PostAccess []string  `json:"postAccess" bson:"postAccess,omitempty"`
	Seo        *SEOInput `json:"seo" bson:"seo,omitempty"`
}

type UpdatePageStatusInput struct {
	ID     string           `json:"id" bson:"_id,omitempty"`
	Status PostOrPageStatus `json:"status" bson:"status,omitempty"`
}

type UpdatePostInput struct {
	Title         *string `json:"title" bson:"title,omitempty"`
	Content       *string `json:"content" bson:"content,omitempty"`
	Excerpt       *string `json:"excerpt" bson:"excerpt,omitempty"`
	FeaturedImage *string `json:"featuredImage" bson:"featuredImage,omitempty"`
	// If a post is featured, default to false.
	IsFeatured *bool `json:"isFeatured" bson:"isFeatured,omitempty"`
	// List of subscription groups with access to the the post
	PostAccess []string  `json:"postAccess" bson:"postAccess,omitempty"`
	Seo        *SEOInput `json:"seo" bson:"seo,omitempty"`
}

type UpdatePostStatusInput struct {
	ID     string           `json:"id" bson:"_id,omitempty"`
	Status PostOrPageStatus `json:"status" bson:"status,omitempty"`
}

type UpdateSEOSettingsInput struct {
	Title       string  `json:"title" bson:"title,omitempty"`
	Description string  `json:"description" bson:"description,omitempty"`
	Image       *string `json:"image" bson:"image,omitempty"`
}

type UpdateSiteSettingsInput struct {
	SiteName        string               `json:"siteName" bson:"siteName,omitempty"`
	BaseURL         string               `json:"baseURL" bson:"baseURL,omitempty"`
	SiteDescription *string              `json:"siteDescription" bson:"siteDescription,omitempty"`
	Timezone        string               `json:"timezone" bson:"timezone,omitempty"`
	SocialProfiles  *SocialProfilesInput `json:"socialProfiles" bson:"socialProfiles,omitempty"`
}

type UpdateFacebookCardSettingsInput struct {
	Type        string  `json:"type" bson:"type,omitempty"`
	Title       string  `json:"title" bson:"title,omitempty"`
	Description string  `json:"description" bson:"description,omitempty"`
	Image       *string `json:"image" bson:"image,omitempty"`
	URL         string  `json:"url" bson:"url,omitempty"`
}

type UpdateTwitterCardSettingsInput struct {
	Card        string  `json:"card" bson:"card,omitempty"`
	Site        *string `json:"site" bson:"site,omitempty"`
	Title       string  `json:"title" bson:"title,omitempty"`
	Description string  `json:"description" bson:"description,omitempty"`
	Image       *string `json:"image" bson:"image,omitempty"`
	Creator     *string `json:"creator" bson:"creator,omitempty"`
}

type PostOrPageStatus string

const (
	PostOrPageStatusPublished PostOrPageStatus = "PUBLISHED"
	PostOrPageStatusDraft     PostOrPageStatus = "DRAFT"
	PostOrPageStatusPending   PostOrPageStatus = "PENDING"
	PostOrPageStatusScheduled PostOrPageStatus = "SCHEDULED"
	PostOrPageStatusTrashed   PostOrPageStatus = "TRASHED"
)

var AllPostOrPageStatus = []PostOrPageStatus{
	PostOrPageStatusPublished,
	PostOrPageStatusDraft,
	PostOrPageStatusPending,
	PostOrPageStatusScheduled,
	PostOrPageStatusTrashed,
}

func (e PostOrPageStatus) IsValid() bool {
	switch e {
	case PostOrPageStatusPublished, PostOrPageStatusDraft, PostOrPageStatusPending, PostOrPageStatusScheduled, PostOrPageStatusTrashed:
		return true
	}
	return false
}

func (e PostOrPageStatus) String() string {
	return string(e)
}

func (e *PostOrPageStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PostOrPageStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PostOrPageStatus", str)
	}
	return nil
}

func (e PostOrPageStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
