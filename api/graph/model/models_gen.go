// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type FacebookCard struct {
	Type        *string `json:"type"`
	Title       *string `json:"title"`
	Description *string `json:"description"`
	Image       *string `json:"image"`
	URL         *string `json:"url"`
}

type FacebookCardInput struct {
	Type        *string `json:"type"`
	Title       *string `json:"title"`
	Description *string `json:"description"`
	Image       *string `json:"image"`
	URL         *string `json:"url"`
}

type Image struct {
	ID          string  `json:"id"`
	Slug        string  `json:"slug"`
	URL         string  `json:"url"`
	Alt         *string `json:"alt"`
	Caption     *string `json:"caption"`
	Description *string `json:"description"`
	Sizes       *Sizes  `json:"sizes"`
}

type LoginInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type LoginResponse struct {
	User         *User  `json:"user"`
	AccessToken  string `json:"accessToken"`
	RefreshToken string `json:"refreshToken"`
}

type Member1 struct {
	ID    string `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
	// Email address verification is vital for sending subscription
	IsEmailVerified bool `json:"isEmailVerified"`
	// Password is optional as members might not need to login
	Password     *string               `json:"password"`
	Subscription []*MemberSubscription `json:"subscription"`
	CreatedAt    time.Time             `json:"createdAt"`
	UpdatedAt    time.Time             `json:"updatedAt"`
}

type MemberSubscription struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	// For free subscriptions, this is set to 0
	Price     *string   `json:"price"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
}

type PageOrPost struct {
	ID            string         `json:"id"`
	Title         string         `json:"title"`
	Slug          string         `json:"slug"`
	PublishedAt   time.Time      `json:"publishedAt"`
	IsFeatured    bool           `json:"isFeatured"`
	Excerpt       *string        `json:"excerpt"`
	Content       string         `json:"content"`
	FeaturedImage *Image         `json:"featuredImage"`
	Type          PostOrPageType `json:"type"`
	// SEO metadata details for the post or page
	Seo *Seo `json:"seo"`
	// Members who have access to this post - this is determined by subscription groups
	// they are part of.
	PostAccess []*MemberSubscription `json:"postAccess"`
	CreatedAt  time.Time             `json:"createdAt"`
	UpdatedAt  time.Time             `json:"updatedAt"`
}

type RegisterInput struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type RegisterResponse struct {
	User *User `json:"user"`
}

type Seo struct {
	Title       *string       `json:"title"`
	Description *string       `json:"description"`
	Image       *string       `json:"image"`
	Twitter     *TwitterCard  `json:"twitter"`
	Facebook    *FacebookCard `json:"facebook"`
}

type SEOInput struct {
	Title       *string            `json:"title"`
	Description *string            `json:"description"`
	Image       *string            `json:"image"`
	Twitter     *TwitterCardInput  `json:"twitter"`
	Facebook    *FacebookCardInput `json:"facebook"`
}

type Size struct {
	Width  int    `json:"width"`
	Height int    `json:"height"`
	URL    string `json:"url"`
}

type Sizes struct {
	Thumbnail   *Size `json:"thumbnail"`
	Medium      *Size `json:"medium"`
	MediumLarge *Size `json:"medium_large"`
	Large       *Size `json:"large"`
	Full        *Size `json:"full"`
}

type Tag struct {
	ID          string    `json:"id"`
	Title       string    `json:"title"`
	Slug        string    `json:"slug"`
	Image       *Image    `json:"image"`
	Description *string   `json:"description"`
	CreatedAt   time.Time `json:"createdAt"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

type TwitterCard struct {
	Card        *string `json:"card"`
	Site        *string `json:"site"`
	Title       *string `json:"title"`
	Description *string `json:"description"`
	Image       *string `json:"image"`
	Creator     *string `json:"creator"`
}

type TwitterCardInput struct {
	Card        *string `json:"card"`
	Site        *string `json:"site"`
	Title       *string `json:"title"`
	Description *string `json:"description"`
	Image       *string `json:"image"`
	Creator     *string `json:"creator"`
}

type UpdatePostInput struct {
	Title         *string   `json:"title"`
	Content       *string   `json:"content"`
	Excerpt       *string   `json:"excerpt"`
	FeaturedImage *string   `json:"featuredImage"`
	Seo           *SEOInput `json:"seo"`
}

type UpdatePostStatusInput struct {
	ID     string           `json:"id"`
	Status PostOrPageStatus `json:"status"`
}

type User struct {
	ID            string      `json:"id"`
	Name          string      `json:"name"`
	Email         string      `json:"email"`
	EmailVerified bool        `json:"emailVerified"`
	Roles         []*UserRole `json:"roles"`
	Password      string      `json:"password"`
	CreatedAt     time.Time   `json:"createdAt"`
	UpdatedAt     time.Time   `json:"updatedAt"`
}

type UserRole struct {
	Name        string    `json:"name"`
	Description string    `json:"description"`
	CreatedAt   time.Time `json:"createdAt"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

type PostOrPageStatus string

const (
	PostOrPageStatusPublished PostOrPageStatus = "PUBLISHED"
	PostOrPageStatusDraft     PostOrPageStatus = "DRAFT"
	PostOrPageStatusPending   PostOrPageStatus = "PENDING"
	PostOrPageStatusScheduled PostOrPageStatus = "SCHEDULED"
	PostOrPageStatusTrashed   PostOrPageStatus = "TRASHED"
)

var AllPostOrPageStatus = []PostOrPageStatus{
	PostOrPageStatusPublished,
	PostOrPageStatusDraft,
	PostOrPageStatusPending,
	PostOrPageStatusScheduled,
	PostOrPageStatusTrashed,
}

func (e PostOrPageStatus) IsValid() bool {
	switch e {
	case PostOrPageStatusPublished, PostOrPageStatusDraft, PostOrPageStatusPending, PostOrPageStatusScheduled, PostOrPageStatusTrashed:
		return true
	}
	return false
}

func (e PostOrPageStatus) String() string {
	return string(e)
}

func (e *PostOrPageStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PostOrPageStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PostOrPageStatus", str)
	}
	return nil
}

func (e PostOrPageStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PostOrPageType string

const (
	PostOrPageTypePage PostOrPageType = "PAGE"
	PostOrPageTypePost PostOrPageType = "POST"
)

var AllPostOrPageType = []PostOrPageType{
	PostOrPageTypePage,
	PostOrPageTypePost,
}

func (e PostOrPageType) IsValid() bool {
	switch e {
	case PostOrPageTypePage, PostOrPageTypePost:
		return true
	}
	return false
}

func (e PostOrPageType) String() string {
	return string(e)
}

func (e *PostOrPageType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PostOrPageType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PostOrPageType", str)
	}
	return nil
}

func (e PostOrPageType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
